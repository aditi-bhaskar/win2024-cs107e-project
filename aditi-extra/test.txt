#include "printf.h"
#include "gpio.h"
#include "uart.h"
#include "servo.h"
#include "timer.h"
#include "remote.h"
#include "LSD6DS33.h"
#include "i2c.h"
#include "passive_buzz.h"

#define HALF 1000
#define QUARTER 500
#define EIGHTH 250
#define SIXTEENTH 125

// UPDATE: Aditi's GPIO PG12 pin is burnt. rip. Used PG7 instead

// eh just to see
static void test_a(void) {
    printf("in test a!\n");
}

static void servo_tests(void) {
    servo_init(GPIO_PB1) ;

    servo_vibrate(5) ; // vibrate for duration 5 sec

    // turns ccw (looking down on shaft) in steps
    servo_turn(-1) ;
    timer_delay(1) ;
    servo_turn(0) ;
    timer_delay(1) ;
    servo_turn(1) ;
    timer_delay(2) ;
}

static void remote_tests(void) {
    interrupts_init() ;
    remote_init(GPIO_PB1, GPIO_PB0) ; 
    interrupts_global_enable() ; // todo ask in OH - is this correct?
    printf("\nremote tests enabled\n") ;
    // timer_delay(10) ;
    // printf("\nremote tests ended\n") ;
}


static void remote_tests_2(void) {
    interrupts_init() ;
    remote_init(GPIO_PB1, GPIO_PB0) ; 
    interrupts_global_enable() ; // todo ask in OH - is this correct?
    printf("\nremote tests 2enabled\n") ;
    while(1) {
        // tilt blocks
        int tilt_status = get_tilt();
        printf("\n device.state %s\n", tilt_status==HOME?"home":(tilt_status==LEFT?"left":"right")) ;
        
        // drop blocks
        if (is_drop()) {printf("\n*** x dropped ***\n");}
    }
}

static void accelerometer_tests_direct(void) {
    printf("in accelr tests direct\n") ;

	while(1) { 
        short x, y, z;
        int state = lsm6ds33_read_durable_pos_y(&x, &y, &z) ; // read and print avged positions
        if (lsm6ds33_durable_pos_x(x)) {printf("\n*** x dropped ***\n");}
	}
}

static void buzzer_tests(void) {
    buzzer_init(GPIO_PE17) ;
    while(1) {
        printf("in buzzer test");
        buzzer_play_note(NOTE_FREQ_C, 5) ;
        buzzer_play_note(NOTE_FREQ_C_SHARP, 5) ;
        buzzer_play_note(NOTE_FREQ_D, 5) ;
    }
}

static void buzzer_tetris_theme(void) {
    buzzer_init(GPIO_PE17) ;
    // https://musescore.com/neoguizmo/scores/2601951
    while(1) {
        printf("in buzzer tetris theme");
        // fast part; each block of code is a measure
        buzzer_play_note(NOTE_FREQ_E, QUARTER) ;
        buzzer_play_note(NOTE_FREQ_B_3, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_C, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_D, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_E, SIXTEENTH) ;
        buzzer_play_note(NOTE_FREQ_D, SIXTEENTH) ;
        buzzer_play_note(NOTE_FREQ_C, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_B_3, EIGHTH) ;

        buzzer_play_note(NOTE_FREQ_A_3, QUARTER) ;
        buzzer_play_note(NOTE_FREQ_A_3, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_C, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_E, QUARTER) ;
        buzzer_play_note(NOTE_FREQ_D, EIGHTH) ;
        buzzer_play_note(NOTE_FREQ_C, EIGHTH) ;

 // todo fill in rest of tetris theme

        // slow falling part
        buzzer_play_note(NOTE_FREQ_E, HALF) ;
        buzzer_play_note(NOTE_FREQ_C, HALF) ;
        buzzer_play_note(NOTE_FREQ_D, HALF) ;
        buzzer_play_note(NOTE_FREQ_B_3, HALF) ;
        buzzer_play_note(NOTE_FREQ_C, QUARTER) ;
        buzzer_play_note(NOTE_FREQ_E, QUARTER) ;
        buzzer_play_note(NOTE_FREQ_A, HALF) ; 
        buzzer_play_note(NOTE_FREQ_G_SHARP, HALF+HALF) ;
    }
}

void main(void) {


    printf("\nStarting main() in %s\n", __FILE__);

    // test_a();
    // servo_tests() ;
    // remote_tests() ; // without accelerometer stuff

    remote_tests_2() ; // with accelerometer stuff


    // i2c_init();
	// lsm6ds33_init(); // don't use when working on buzzer stuff / other mango pi; never passes
    // accelerometer_tests_direct() ;


    // // buzzer_tests() ;
    // buzzer_tetris_theme() ;

    printf("\nCompleted execution of main() in %s\n", __FILE__);
}


